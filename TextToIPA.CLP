;distinctive features
(deffacts coronal
	(cor "t") (cor "d") (cor "ɾ") (cor "tʃ")
	(cor "dʒ") (cor "θ") (cor "ð") (cor "s")
	(cor "z") (cor "ʃ") (cor "ʒ") (cor "n")
	(cor "ɹ") (cor "l") (cor "j"))
	
(deffacts anterior
	(ant "p") (ant "b") (ant "t") (ant "d")
	(ant "ɾ") (ant "f") (ant "v") (ant "θ")
	(ant "ð") (ant "s") (ant "z") (ant "m")
	(ant "n") (ant "ɹ") (ant "l"))

(deffacts nasal
	(nas "m") (nas "n") (nas "ŋ"))
	
(deffacts strident
	(stri "tʃ") (stri "dʒ") (stri "f") (stri "v")
	(stri "s") (stri "z") (stri "ʃ") (stri "ʒ"))
	
(deffacts lateral
	(lat "l"))
	
(deffacts is-high
	(high "k") (high "g")(high "tʃ") (high "dʒ")
	(high "ʃ") (high "ʒ") (high "x") (high "ŋ")
	(high "w") (high "j") (high "i") (high "ɪ")
	(high "u") (high "ʊ"))
	
(deffacts is-low
	(low "ʔ") (low "h") (low "ɒ") (low "ɑ")
	(low "ʌ") (low "æ"))

(deffacts is-back
	(back "k") (back "g") (back "ŋ") (back "u")
	(back "ʊ") (back "ɔ") (back "o") (back "ɒ")
	(back "ɑ"))
	
(deffacts is-front
	(front "i") (front "ɪ") (front "æ") (front "e")
	(front "ɛ"))
	
(deffacts is-round
	(round "w") (round "u") (round "ʊ") (round "ɔ")
	(round "o") (round "ɒ"))

(deffacts voiced	
	(voice "b") (voice "d") (voice "ɾ") (voice "g")
	(voice "dʒ") (voice "v") (voice "ð") (voice "z")
	(voice "ʒ") (voice "m") (voice "n") (voice "ŋ")
	(voice "ɹ") (voice "l") (voice "w") (voice "j"))
	
(deffacts plosive
	(plos "p") (plos "b") (plos "t") (plos "d")
	(plos "ɾ") (plos "k") (plos "g") (plos "ʔ"))
	
(deffacts affricate
	(affr "tʃ") (affr "dʒ"))

(deffacts fricative
	(fric "f") (fric "v") (fric "θ") (fric "ð")
	(fric "s") (fric "z") (fric "ʃ") (fric "ʒ")
	(fric "x") (fric "h"))

(deffacts liquid
	(liq "ɹ") (liq "l"))
	
(deffacts is-glide
	(glide "w") (glide "j"))
	
(deffacts syllabic
	(syll "i") (syll "ɪ") (syll "u") (syll "ʊ")
	(syll "ɔ") (syll "o") (syll "ɒ") (syll "ɑ")
	(syll "ʌ") (syll "æ") (syll "e") (syll "ɛ")
	(syll "ə") (syll "ɜ") (syll "a"))
	
(defrule obstruent
	(or (plos ?x) (affr ?x) (fric ?x))
	=> (assert (obs ?x)))
	
(defrule sonorant
	(or (nas ?x) (liq ?x) (glide ?x) (syll ?x))
	=> (assert (son ?x)))
	
(defrule consonantal
	(or (obs ?x) (nas ?x) (liq ?x))
	=> (assert (cons ?x)))
	
(defrule continuant
	(or (fric ?x) (liq ?x) (glide ?x))
	=> (assert (cont ?x)))
	
(deffacts is-vowel
	(vowel "a") (vowel "e") (vowel "i") (vowel "o")
	(vowel "u") (vowel "y"))	

;getting text from user
(deffacts start
	(input 0) (lower 0))

(defrule get-input
	?f <- (input 0)
	=> (printout t "Text: ")
	(retract ?f)
	(assert (text (readline))))
	
(defrule to-lower
	?f1 <- (text ?input)
	?f2 <- (lower 0)
	=> 
	(if (not (eq ?input 0))
		then
		(retract ?f1)
		(retract ?f2)
		(assert (text (lowcase ?input))) 
		(assert (lower 1)) 
		(assert (preceding1 " "))
		(assert (preceding2 " "))
		(assert (preceding3 " "))
		(assert (hasletter 0)) 
		(assert (ipastring #))))
	
(defrule find-letter
	?f <- (hasletter 0)
	(text ?text)
	=> 
	(retract ?f) 
	(assert (letter (sub-string 1 1 ?text)))
	(assert (next1 (sub-string 2 2 ?text))) 
	(assert (hasletter 1))
	(assert (next2 (sub-string 3 3 ?text)))
	(assert (next3 (sub-string 4 4 ?text)))	
	(assert (next4 (sub-string 5 5 ?text))))
	
;orthography rules
(defrule f-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "f")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text) 
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "f")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa f)))
		(assert (hasletter 0))
		(assert (preceding1 "f"))
		(assert (preceding2 "f"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not(eq ?w "f"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa f)))
		(assert (hasletter 0))
		(assert (preceding1 "f"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule m-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "m")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "m")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa m)))
		(assert (hasletter 0))
		(assert (preceding1 "m"))
		(assert (preceding2 "m"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not(eq ?w "m"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa m)))
		(assert (hasletter 0))
		(assert (preceding1 "m"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))) 

(defrule a-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "a")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?b)
	=> 
	(if (and (or (eq ?w "n") (eq ?w "l")) (or (eq ?x "") (eq ?x " ") (eq ?x "s")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule a-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "a")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?w))
	=> 
	(if (and (or (eq ?x "") (eq ?x " ")) (not (eq ?w "r")) 
		(not (or (eq ?b " ") (eq ?c " "))) (not (eq ?w "")) (not (eq ?w " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (and (or (eq ?x "") (eq ?x " ")) (not (eq ?w "r")) 
		(or (eq ?b " ") (eq ?c " ")) (not (eq ?w "")) (not (eq ?w " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa æ)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule a-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "a")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?w))
	(vowel ?x)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa eɪ)))
	(assert (hasletter 0))
	(assert (preceding1 "a"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))

(defrule a-rule4
	(declare (salience 80))
	?f1 <- (hasletter 1)
	?f2 <- (letter "a")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?w "r") (eq ?w "l"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɑ)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule a-rule5
	(declare (salience 10))
	?f1 <- (hasletter 1) ;250
	?f2 <- (letter "a")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "i")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa eɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 "a"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (or (eq ?w "u")
		(eq ?w "w"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɔ)))
		(assert (hasletter 0))
		(assert (preceding1 ?w))
		(assert (preceding2 "a"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "y")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa eɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (or (eq ?w " ") (eq ?w ""))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (and (not (eq ?w "u"))
		(not (eq ?w "i"))
		(not (eq ?w "y")) 
		(not (eq ?w ""))
		(not (eq ?w " "))
		(not (eq ?w "w")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa æ)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule e-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "e")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?b)
	=> 
	(if (and (or (eq ?w "") (eq ?w " "))
		(or (eq ?b " ") (eq ?c " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f10) (retract ?f11)
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule e-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "e")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (eq ?w "y") (or (eq ?x " ") (eq ?x "") (eq ?x "s") (and(eq ?x "e") (eq ?y "d"))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa i)))
		(assert (hasletter 0))
		(assert (preceding1 "y"))
		(assert (preceding2 "e"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (or (eq ?w "") (eq ?w " "))
		(or (eq ?b " ") (eq ?c " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa i)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (eq ?w "x")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule e-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "e")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "s") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?a))
	(not (vowel ?b))
	=> 
	(if (and (or (eq ?x " ") (eq ?x "")) (not (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ð")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɪz)))
		(assert (hasletter 0))
		(assert (preceding1 "s"))
		(assert (preceding2 "e"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (or (eq ?x " ") (eq ?x "")) (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ð"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa z)))
		(assert (hasletter 0))
		(assert (preceding1 "s"))
		(assert (preceding2 "e"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (or (eq ?x " ") (eq ?x "")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɛ)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule e-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "e")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 "e")
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?w))
	=> 
	(if (not (or (eq ?w " ") (eq ?w "")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa i)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule e-rule5
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "e")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?w " ") (eq ?w ""))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f10) (retract ?f11)
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))		
(defrule e-rule6
	(declare (salience 50))
	?f1 <- (hasletter 1)
	?f2 <- (letter "e")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?w "e") (eq ?w "a"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa i)))
		(assert (hasletter 0))
		(assert (preceding1 ?w))
		(assert (preceding2 "e"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "r")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (eq ?w "u")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa u)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (or (or (eq ?w "e") (eq ?w "a")) (eq ?w "r") (eq ?w "u")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɛ)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule i-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?w "") (eq ?w " ") (eq ?w "a"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa i)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (and (or (eq ?x "i") (eq ?b "i")) (not (or (eq ?w "a") (eq ?w "e"))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (and (eq ?a " ") (or (eq ?w " ") (eq ?w "")))
		then
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa aɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
	
(defrule i-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "g") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (or (eq ?x "h") (eq ?x "n")) (not (eq ?a " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa aɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
	
(defrule i-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "o") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=>  
	(if (or (eq ?x "") (eq ?x " "))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ijoʊ)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 "i"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (or (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʃ")
		(eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "s"))
		(eq ?x "u"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 4 (str-length ?text) ?text))))
	(if (and (or (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʃ")
		(eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "s"))
		(not (eq ?x "u")) (not (eq ?x "")) (not (eq ?x " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 "i"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (not (or (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʃ")
		(eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "s")))
		(eq ?x "u"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa iə)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 4 (str-length ?text) ?text))))
	(if (and (not (or (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʃ")
		(eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "s")))
		(not (eq ?x "u")) (not (eq ?x "")) (not (eq ?x " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa iə)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 "i"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))

(defrule i-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "a") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=>  
	(if (and (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʃ")
		(eq ?x "l"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 "i"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 4 (str-length ?text) ?text))))
	(if (and (not (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʃ"))
		(eq ?x "l"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa aɪjə)))
		(assert (hasletter 0))
		(assert (preceding1 "a"))
		(assert (preceding2 "i"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))		
(defrule i-rule5
	(declare (salience 90))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?x)
	=>  
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa aɪ)))
	(assert (hasletter 0))
	(assert (preceding1 "i"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule i-rule6
	(declare (salience 90))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "e") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa i)))
	(assert (hasletter 0))
	(assert (preceding1 "e"))
	(assert (preceding2 "i"))
	(assert (preceding3 ?a))
	(assert (text (sub-string 3 (str-length ?text) ?text))))
	
(defrule i-rule7
	(declare (salience 80))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?w)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa aɪj)))
	(assert (hasletter 0))
	(assert (preceding1 "i"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule i-rule8
	(declare (salience 50))
	?f1 <- (hasletter 1)
	?f2 <- (letter "i")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa ɪ)))
	(assert (hasletter 0))
	(assert (preceding1 "i"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule n-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "n")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "n")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa n)))
		(assert (hasletter 0))
		(assert (preceding1 "n"))
		(assert (preceding2 "n"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not(eq ?w "n"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa n)))
		(assert (hasletter 0))
		(assert (preceding1 "n"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule y-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "y")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?a))
	(not (vowel ?b))
	=> 
	(if (and (or (eq ?w "") (eq ?w " "))
		(or (eq ?b "") (eq ?b " ") (eq ?c "") (eq ?c " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa aɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "y"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule y-rule2
	(declare (salience 90))
	?f1 <- (hasletter 1)
	?f2 <- (letter "y")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?a))
	(not (vowel ?w))
	(not (eq ?a " "))
	=> 
	(if (or (eq ?w "") (eq ?w " "))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa i)))
		(assert (hasletter 0))
		(assert (preceding1 "y"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (and (not (eq ?w "")) (not (eq ?w " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "y"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule y-rule3
	(declare (salience 90))
	?f1 <- (hasletter 1)
	?f2 <- (letter "y")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text) 
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	(vowel ?w)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa j)))
	(assert (hasletter 0))
	(assert (preceding1 "y"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))

(defrule y-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "y")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	(not (vowel ?w))
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f10) (retract ?f11)
	(assert (hasletter 0))
	(assert (preceding1 "y"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule y-rule5
	(declare (salience 60))
	?f1 <- (hasletter 1)
	?f2 <- (letter "y")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa j)))
	(assert (hasletter 0))
	(assert (preceding1 "y"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
		
(defrule u-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "u")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?w))
	(not (vowel ?x))
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa ʌ)))
	(assert (hasletter 0))
	(assert (preceding1 "u"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule u-rule2
	?f1 <- (hasletter 1)
	?f2 <- (letter "u")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "e")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa u)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 "u"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (eq ?w "i") (eq ?a "g"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa wɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 "u"))
		(assert (preceding3 ?b))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (eq ?w "i") (not (eq ?a "g")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɪ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 "u"))
		(assert (preceding3 ?b))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (not (eq ?w "e")) (not (eq ?w "i")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ju)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule q-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "q")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (eq ?w "u")
		(eq ?x "e")
		(or (eq ?y " ") (eq ?y "")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa k)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 "u"))
		(assert (preceding3 "q"))
		(assert (text (sub-string 4 (str-length ?text) ?text))))
	(if (not(eq ?w "u"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa k)))
		(assert (hasletter 0))
		(assert (preceding1 "q"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (and (not (and (eq ?w "u")
		(eq ?x "e")
		(or (eq ?y " ") (eq ?y ""))))
		(eq ?w "u"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa kw)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 "q"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))

(defrule w-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "w")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	(vowel ?w)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa w)))
	(assert (hasletter 0))
	(assert (preceding1 "w"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))

(defrule w-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "w")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f10) (retract ?f11)
	(assert (hasletter 0))
	(assert (preceding1 "w"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
		
(defrule w-rule3
	(declare (salience 10))
	?f1 <- (hasletter 1)
	?f2 <- (letter "w")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "h")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa w)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "w"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "r")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɹ)))
		(assert (hasletter 0))
		(assert (preceding1 "r"))
		(assert (preceding2 "w"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (not (eq ?w "h"))
		(not (eq ?w "r")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa w)))
		(assert (hasletter 0))
		(assert (preceding1 "w"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule d-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "d")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "g")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa dʒ)))
		(assert (hasletter 0))
		(assert (preceding1 "g"))
		(assert (preceding2 "d"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not(eq ?w "g"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa d)))
		(assert (hasletter 0))
		(assert (preceding1 "d"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule x-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "x")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?a " ")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa z)))
		(assert (hasletter 0))
		(assert (preceding1 "x"))
		(assert (preceding2 " "))
		(assert (preceding3 ?a))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (not(eq ?a " "))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ks)))
		(assert (hasletter 0))
		(assert (preceding1 "x"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule j-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "j")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa dʒ)))
	(assert (hasletter 0))
	(assert (preceding1 "j"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule h-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "h")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa h)))
	(assert (hasletter 0))
	(assert (preceding1 "h"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
		
(defrule b-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "b")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w)
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=>
	(if (or (eq ?w "t") (and (eq ?a "m") (not (eq ?b "e")) (not (eq ?c " "))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f10) (retract ?f11)
		(assert (hasletter 0))
		(assert (preceding1 "b"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (eq ?w "b")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa b)))
		(assert (hasletter 0))
		(assert (preceding1 "b"))
		(assert (preceding2 "b"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (or (eq ?w "b") (or (eq ?w "t") (and (eq ?a "m") (not (eq ?b "e")) (not (eq ?c " "))))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa b)))
		(assert (hasletter 0))
		(assert (preceding1 "b"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule r-rule1
	(declare (salience 15))
	?f1 <- (hasletter 1)
	?f2 <- (letter "r")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?b))
	(not (vowel ?a))
	=> 		
	(if (and (eq ?w "e") (or (eq ?x "") (eq ?x " ")) (not (or (eq ?a " ") (eq ?b " "))) (not (eq ?b "n")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɹ)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 "r"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))

(defrule r-rule2
	(declare (salience 10))
	?f1 <- (hasletter 1)
	?f2 <- (letter "r")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "r")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɹ)))
		(assert (hasletter 0))
		(assert (preceding1 "r"))
		(assert (preceding2 "r"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (eq ?w "r"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɹ)))
		(assert (hasletter 0))
		(assert (preceding1 "r"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule l-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "l")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "e") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?a))
	(not (vowel ?b))
	=> 
	(if (and (not (or (eq ?a " ") (eq ?b " "))) (not (eq ?b "n")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa əl)))
		(assert (hasletter 0))
		(assert (preceding1 "e"))
		(assert (preceding2 "l"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))
		
(defrule l-rule2
	?f1 <- (hasletter 1)
	?f2 <- (letter "l")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (eq ?w "k") (or (eq ?a "a") (eq ?a "o")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8)  (retract ?f10) (retract ?f11)
		(assert (hasletter 0))
		(assert (preceding1 "l"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (eq ?w "l")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa l)))
		(assert (hasletter 0))
		(assert (preceding1 "l"))
		(assert (preceding2 "l"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (or (and (eq ?w "k") (or (eq ?a "a") (eq ?a "o"))) (eq ?w "l")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa l)))
		(assert (hasletter 0))
		(assert (preceding1 "l"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule v-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "v")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa v)))
	(assert (hasletter 0))
	(assert (preceding1 "v"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
		
(defrule k-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "k")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "n")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa n)))
		(assert (hasletter 0))
		(assert (preceding1 "n"))
		(assert (preceding2 "k"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "k")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa k)))
		(assert (hasletter 0))
		(assert (preceding1 "k"))
		(assert (preceding2 "k"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (not (eq ?w "k"))
		(not (eq ?w "n")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)		(assert (ipastring (str-cat ?ipa k)))
		(assert (hasletter 0))
		(assert (preceding1 "k"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule p-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "p")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "h")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa f)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "p"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "p")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa p)))
		(assert (hasletter 0))
		(assert (preceding1 "p"))
		(assert (preceding2 "p"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (not (eq ?w "p"))
		(not (eq ?w "h")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)		(assert (ipastring (str-cat ?ipa p)))
		(assert (hasletter 0))
		(assert (preceding1 "p"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule z-rule1
	?f1 <- (hasletter 1)
	?f2 <- (letter "z")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "z")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ts)))
		(assert (hasletter 0))
		(assert (preceding1 "z"))
		(assert (preceding2 "z"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not(eq ?w "z"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa z)))
		(assert (hasletter 0))
		(assert (preceding1 "z"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule t-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "t")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "h") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?x))
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa θ)))
	(assert (hasletter 0))
	(assert (preceding1 "h"))
	(assert (preceding2 "t"))
	(assert (preceding3 ?a))
	(assert (text (sub-string 3 (str-length ?text) ?text))))

(defrule t-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "t")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "h") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?x)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa ð)))
	(assert (hasletter 0))
	(assert (preceding1 "h"))
	(assert (preceding2 "t"))
	(assert (preceding3 ?a))
	(assert (text (sub-string 3 (str-length ?text) ?text))))
	
(defrule t-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "t")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "i") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (or (eq ?a "r") (eq ?a "c") (eq ?a "n") (eq ?a "m"))
		(or (eq ?x "o") (eq ?x "a")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʃ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 "t"))
		(assert (preceding3 ?b))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))
	
(defrule t-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "t")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "i") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?x "o") (eq ?x "a"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʃ)))
		(assert (hasletter 0))
		(assert (preceding1 "t"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule t-rule5
	(declare (salience 50))
	?f1 <- (hasletter 1)
	?f2 <- (letter "t")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (eq ?w "c")
		(eq ?x "h"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa tʃ)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "c"))
		(assert (preceding3 "t"))
		(assert (text (sub-string 4 (str-length ?text) ?text))))
	(if (not (and (eq ?w "c") (eq ?x "h")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa t)))
		(assert (hasletter 0))
		(assert (preceding1 "t"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
			
(defrule g-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 " ") 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "h")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa g)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "g"))
		(assert (preceding3 " "))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "n")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa n)))
		(assert (hasletter 0))
		(assert (preceding1 "n"))
		(assert (preceding2 "g"))
		(assert (preceding3 " "))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))

(defrule g-rule2
	(declare (salience 80))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "h") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?a "a")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa g)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "g"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʌ")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa f)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "g"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (not (eq (sub-string (str-length ?ipa) (str-length ?ipa) ?ipa) "ʌ"))
		(not (eq ?a "a")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f10) (retract ?f11)
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "g"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))
		
(defrule g-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	(vowel ?w)
	=> 
	(if (or (eq ?w "i") (eq ?w "e"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa dʒ)))
		(assert (hasletter 0))
		(assert (preceding1 "g"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
	
(defrule g-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "e") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (not (eq ?x "t"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa dʒ)))
		(assert (hasletter 0))
		(assert (preceding1 "g"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule g-rule5
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?x)
	=> 
	(if (and (or (eq ?a "") (eq ?a " ") (eq ?a "n"))
		(or (eq ?w "i") (eq ?w "e")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa dʒ)))
		(assert (hasletter 0))
		(assert (preceding1 "g"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule g-rule6
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "n") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?x "") (eq ?x " ") (eq ?x "s") (and (eq ?x "e") (eq ?y "d")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa n)))
		(assert (hasletter 0))
		(assert (preceding1 "n"))
		(assert (preceding2 "g"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))
		
(defrule g-rule7
	(declare (salience 10))
	?f1 <- (hasletter 1)
	?f2 <- (letter "g")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa g)))
	(assert (hasletter 0))
	(assert (preceding1 "g"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule o-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?w "w") (eq ?w "a") (and (eq ?w "l") (eq ?x "k")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa oʊ)))
		(assert (hasletter 0))
		(assert (preceding1 ?w))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "r")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɔ)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (or (eq ?w "i") (eq ?w "y"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɔɪ)))
		(assert (hasletter 0))
		(assert (preceding1 ?w))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (eq ?w "o")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʊ)))
		(assert (hasletter 0))
		(assert (preceding1 ?w))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (or (eq ?w " ") (eq ?w ""))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa oʊ)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule o-rule2
	(declare (salience 80))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?w))
	(not (vowel ?x))
	=> 
	(if (and (not (eq ?w "")) (not (eq ?w " "))
		(not (eq ?x "")) (not (eq ?x " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɒ)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule o-rule3
	(declare (salience 80))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?w))
	(vowel ?x)
	=> 
	(if (and (not (eq ?w "")) (not (eq ?w " ")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa oʊ)))
		(assert (hasletter 0))
		(assert (preceding1 "o"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule o-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "u") 
	?f6 <- (next2 "g")
	?f7 <- (next3 "h")
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?z)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa ʌ)))
	(assert (hasletter 0))
	(assert (preceding1 "u"))
	(assert (preceding2 "o"))
	(assert (preceding3 ?a))
	(assert (text (sub-string 3 (str-length ?text) ?text))))
	
(defrule o-rule5
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "u") 
	?f6 <- (next2 "g")
	?f7 <- (next3 "h")
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(not (vowel ?z))
	=> 
	(if (and (not (eq ?z "")) (not (eq ?z " ")) (not (eq ?z "s")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ɔ)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))
	
(defrule o-rule6
	(declare (salience 80))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "u") 
	?f6 <- (next2 "g")
	?f7 <- (next3 "h")
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa oʊ)))
	(assert (hasletter 0))
	(assert (preceding1 "u"))
	(assert (preceding2 "o"))
	(assert (preceding3 ?a))
	(assert (text (sub-string 3 (str-length ?text) ?text))))
	
(defrule o-rule7
	(declare (salience 70))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "u") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (eq ?x "s") (or (eq ?y "") (eq ?y " ")))
		then 
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ə)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (and (eq ?x "s") (or (eq ?y "") (eq ?y " "))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa aʊ)))
		(assert (hasletter 0))
		(assert (preceding1 "u"))
		(assert (preceding2 "o"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))
		
(defrule o-rule8
	(declare (salience 40))
	?f1 <- (hasletter 1)
	?f2 <- (letter "o")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa ə)))
	(assert (hasletter 0))
	(assert (preceding1 "o"))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))
	
(defrule c-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "c")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "i") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	=> 
	(if (or (eq ?x "o") (eq ?x "a"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʃə)))
		(assert (hasletter 0))
		(assert (preceding1 ?x))
		(assert (preceding2 "i"))
		(assert (preceding3 "c"))
		(assert (text (sub-string 4 (str-length ?text) ?text)))))

(defrule c-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "c")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (or (eq ?a "n") (eq ?a "r")) (or (eq ?w "e") (eq ?w "i")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa s)))
		(assert (hasletter 0))
		(assert (preceding1 "c"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
		
(defrule c-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "c")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "i") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (or (eq ?a "r") (eq ?a "n") (eq ?a "m"))
		(or (eq ?x "o") (eq ?x "a")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʃ)))
		(assert (hasletter 0))
		(assert (preceding1 "c"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule c-rule4
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "c")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (and (eq ?a " ")
		(or (eq ?w "i") (eq ?w "e")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa s)))
		(assert (hasletter 0))
		(assert (preceding1 "c"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (or (eq ?w "c")
			(eq ?w "h"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa tʃ)))
		(assert (hasletter 0))
		(assert (preceding1 ?w))
		(assert (preceding2 "c"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))

(defrule c-rule5
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "c")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	(vowel ?a)
	(vowel ?w)
	=> 
	(if (or (eq ?w "i") (eq ?w "e"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa s)))
		(assert (hasletter 0))
		(assert (preceding1 "c"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))		
(defrule c-rule6
	(declare (salience 10))
	?f1 <- (hasletter 1)
	?f2 <- (letter "c")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?w "k")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa k)))
		(assert (hasletter 0))
		(assert (preceding1 "k"))
		(assert (preceding2 "c"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (eq ?w "k"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa k)))
		(assert (hasletter 0))
		(assert (preceding1 "c"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))
	
(defrule s-rule1
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "s")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "s") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?x "u") (and (eq ?x "i") (eq ?y "o") (eq ?z "n")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʃ)))
		(assert (hasletter 0))
		(assert (preceding1 "s"))
		(assert (preceding2 "s"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (not (or (eq ?x "u") (and (eq ?x "i") (eq ?y "o") (eq ?z "n"))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa s)))
		(assert (hasletter 0))
		(assert (preceding1 "s"))
		(assert (preceding2 "s"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))	
(defrule s-rule2
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "s")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "c") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (or (eq ?x "i")
		(eq ?x "e"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa s)))
		(assert (hasletter 0))
		(assert (preceding1 "c"))
		(assert (preceding2 "s"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (and (eq ?x "h")
		(eq ?a " "))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa sk)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "c"))
		(assert (preceding3 "s"))
		(assert (text (sub-string 4 (str-length ?text) ?text)))))

(defrule s-rule3
	(declare (salience 100))
	?f1 <- (hasletter 1)
	?f2 <- (letter "s")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "h") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa ʃ)))
	(assert (hasletter 0))
	(assert (preceding1 "h"))
	(assert (preceding2 "s"))
	(assert (preceding3 ?a))
	(assert (text (sub-string 3 (str-length ?text) ?text))))

(defrule s-rule4
	(declare (salience 10))
	?f1 <- (hasletter 1)
	?f2 <- (letter "s")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 "c") 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 
	(if (eq ?x "h")
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʃ)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "c"))
		(assert (preceding3 "s"))
		(assert (text (sub-string 4 (str-length ?text) ?text))))
	(if (not (eq ?x "h"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa sk)))
		(assert (hasletter 0))
		(assert (preceding1 "h"))
		(assert (preceding2 "c"))
		(assert (preceding3 ?a))
		(assert (text (sub-string 3 (str-length ?text) ?text)))))	
(defrule s-rule5
	(declare (salience 5))
	?f1 <- (hasletter 1)
	?f2 <- (letter "s")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 	
	(if (and (eq ?w "i") (or (eq ?x "a") (eq ?x "o")))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa ʒ)))
		(assert (hasletter 0))
		(assert (preceding1 "i"))
		(assert (preceding2 "s"))
		(assert (preceding3 ?b))
		(assert (text (sub-string 3 (str-length ?text) ?text))))
	(if (or (and (eq ?w "m") (or (eq ?a "i") (eq ?a "a"))) (eq ?a "y"))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa z)))
		(assert (hasletter 0))
		(assert (preceding1 "s"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text))))
	(if (not (or (and (eq ?w "i") (or (eq ?x "a") (eq ?x "o"))) (or (and (eq ?w "m") (or (eq ?a "i") (eq ?a "a"))) (eq ?a "y"))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
		(assert (ipastring (str-cat ?ipa s)))
		(assert (hasletter 0))
		(assert (preceding1 "s"))
		(assert (preceding2 ?a))
		(assert (preceding3 ?b))
		(assert (text (sub-string 2 (str-length ?text) ?text)))))

(defrule space-rule
	?f1 <- (hasletter 1)
	?f2 <- (letter " ")
	?f3 <- (preceding1 ?a) 
	?f4 <- (preceding2 ?b)
	?f5 <- (next1 ?w) 
	?f6 <- (next2 ?x)
	?f7 <- (next3 ?y)
	?f8 <- (next4 ?z)
	?f9 <- (ipastring ?ipa)
	?f10 <- (text ?text)
	?f11 <- (preceding3 ?c)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (ipastring (str-cat ?ipa " ")))
	(assert (hasletter 0))
	(assert (preceding1 " "))
	(assert (preceding2 ?a))
	(assert (preceding3 ?b))
	(assert (text (sub-string 2 (str-length ?text) ?text))))

;phonological rules
(defrule end-orth
	(letter "") (next1 "") (next2 "") (next3 "") (next4 "")
	=>
	(assert (hasIPA 0)))
	
(defrule find-char
	?f <- (hasIPA 0)
	(ipastring ?text)
	=> 
	(retract ?f) 
	(assert (char (sub-string 1 1 ?text)))
	(assert (nextChar1 (sub-string 2 2 ?text))) 
	(assert (nextChar2 (sub-string 3 3 ?text)))
	(assert (nextChar3 (sub-string 4 4 ?text)))	
	(assert (nextChar4 (sub-string 5 5 ?text)))
	(assert (hasIPA 1)))

(defrule num-rule
	?f1 <- (hasIPA 1)
	?f2 <- (char "#")
	?f3 <- (nextChar1 ?w) 
	?f4 <- (nextChar2 ?x)
	?f5 <- (nextChar3 ?y)
	?f6 <- (nextChar4 ?z)
	?f7 <- (ipastring ?text)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) 
	(assert (output " "))
	(assert (hasIPA 0))
	(assert (preChar1 " "))
	(assert (preChar2 " "))
	(assert (preChar3 " "))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))

(defrule space-rule1
	?f1 <- (hasIPA 1)
	?f2 <- (char " ")
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa " ")))
	(assert (hasIPA 0))
	(assert (preChar1 " "))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule unvoiced2-rule1
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(plos ?m)
	(nas ?a)
	(plos ?w)
	=>		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f11)
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule unvoiced2-rule2
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(plos ?m)
	(fric ?a)
	(plos ?w)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f11)
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule unvoiced2-rule3
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 " ") 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(plos ?m)
	(fric ?a)
	(plos ?x)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f11)
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))

(defrule unvoiced2-rule4
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 " ") 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(plos ?m)
	(nas ?a)
	(plos ?x)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f11)
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule n2-rule1
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char "n")
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(back ?w)
	(not (syll ?w))
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa "ŋ")))
	(assert (hasIPA 0))
	(assert (preChar1 "ŋ"))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule g2-rule1
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char "g")
	?f3 <- (preChar1 "ŋ")
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	=> 	
	(if (or (eq ?w "") (eq ?w " ") (eq ?w "s") (not (or (eq ?y "") (eq ?y " "))))
		then
		(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
		(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f11)
		(assert (hasIPA 0))
		(assert (preChar1 "g"))
		(assert (preChar2 "ŋ"))
		(assert (preChar3 ?b))
		(assert (ipastring (sub-string 2 (str-length ?text) ?text)))))
	
(defrule flap2-rule1
	(declare (salience 10))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?w)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(cor ?w)
	(plos ?w)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa "ɾ")))
	(assert (hasIPA 0))
	(assert (preChar1 ?w))
	(assert (preChar2 ?w))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 3 (str-length ?text) ?text))))
	
(defrule gen-rule1
	(declare (salience 5))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(plos ?m)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa ?m)))
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule gen-rule2
	(declare (salience 5))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(fric ?m)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa ?m)))
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule gen-rule3
	(declare (salience 5))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(liq ?m)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa ?m)))
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule gen-rule4
	(declare (salience 5))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(nas ?m)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa ?m)))
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule gen-rule5
	(declare (salience 5))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(syll ?m)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa ?m)))
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))
	
(defrule gen-rule6
	(declare (salience 5))
	?f1 <- (hasIPA 1)
	?f2 <- (char ?m)
	?f3 <- (preChar1 ?a)
	?f4 <- (preChar2 ?b)
	?f5 <- (preChar3 ?c)
	?f6 <- (nextChar1 ?w) 
	?f7 <- (nextChar2 ?x)
	?f8 <- (nextChar3 ?y)
	?f9 <- (nextChar4 ?z)
	?f10 <- (output ?ipa)
	?f11 <- (ipastring ?text)
	(voice ?m)
	=> 		
	(retract ?f1) (retract ?f2) (retract ?f3) (retract ?f4) (retract ?f5) 
	(retract ?f6) (retract ?f7) (retract ?f8) (retract ?f9) (retract ?f10) (retract ?f11)
	(assert (output (str-cat ?ipa ?m)))
	(assert (hasIPA 0))
	(assert (preChar1 ?m))
	(assert (preChar2 ?a))
	(assert (preChar3 ?b))
	(assert (ipastring (sub-string 2 (str-length ?text) ?text))))

;print and reset
(defrule printipa
	(char "")
	(nextChar1 "")
	(nextChar2 "")
	(nextChar3 "")
	(nextChar4 "")
	(output ?x)
	=>
	(printout t "IPA:" ?x crlf)
	(assert (finished 1)))
	
(defrule reset
	(finished 1)
	=>
	(reset)
	(run))
